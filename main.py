import os
import asyncio
from dataclasses import dataclass, field
from typing import Dict, Optional, Tuple, List
from datetime import datetime, timedelta
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# ===================== SIMPLE, INLINE-FIRST MVP =====================
# ‚Ä¢ –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, –ø—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.
# ‚Ä¢ ¬´–°–≤—è–∑–∞—Ç—å—Å—è¬ª ‚Äî —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä.
# ‚Ä¢ –õ–æ–≥–∏ –∑–≤–æ–Ω–∫–æ–≤: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É —Å –æ—Ç–º–µ—Ç–∫–æ–π "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ".
# ================================================================

# --------------------- Config & Globals ---------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in .env")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher(storage=MemoryStorage())

SUPPORT_PHONE = os.getenv("SUPPORT_PHONE", "+375290000000")
SUPPORT_NAME = os.getenv("SUPPORT_NAME", "–î–∏—Å–ø–µ—Ç—á–µ—Ä")
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x.isdigit()}
PHONE_SHARE_RATE_LIMIT = int(os.getenv("PHONE_SHARE_RATE_LIMIT", "300"))  # —Å–µ–∫
COMMISSION_PCT = float(os.getenv("COMMISSION_PCT", "10")) / 100.0

# --------------------- Data Models ---------------------

def mention(user_id: int, username: Optional[str], full_name: str) -> str:
    return f"@{username}" if username else f"[{full_name}](tg://user?id={user_id})"

@dataclass
class User:
    user_id: int
    role: Optional[str] = None  # customer|executor|dispatcher
    username: Optional[str] = None
    full_name: str = ""
    availability_text: Optional[str] = None

@dataclass
class Order:
    id: int
    customer_id: int
    description: str
    when_dt: Optional[datetime] = None
    address_text: Optional[str] = None
    latlon: Optional[Tuple[float, float]] = None
    attachments_count: int = 0
    status: str = "open"  # open|matched|closed
    bids: Dict[int, float] = field(default_factory=dict)  # executor_id -> price (net)
    chosen_executor_id: Optional[int] = None

@dataclass
class Match:
    order_id: int
    customer_id: int
    executor_id: int
    active: bool = True
    reveal_requested: Dict[int, bool] = field(default_factory=dict)
    reveal_approved_by_dispatcher: bool = False

@dataclass
class CallLog:
    id: int
    ts: datetime
    from_user_id: int
    from_name: str
    phone: str
    source: str  # "button" | "text"
    status: str = "new"  # new|done

USERS: Dict[int, User] = {}
ORDERS: Dict[int, Order] = {}
MATCHES: Dict[int, Match] = {}
ACTIVE_CHATS: Dict[int, Tuple[int, int]] = {}  # user_id -> (peer_id, order_id)

CALL_LOGS: Dict[int, CallLog] = {}
_call_log_seq = 1

LAST_PHONE_SHARE: Dict[int, datetime] = {}

_order_seq = 1
def next_order_id() -> int:
    global _order_seq
    i = _order_seq
    _order_seq += 1
    return i

def next_call_log_id() -> int:
    global _call_log_seq
    i = _call_log_seq
    _call_log_seq += 1
    return i

# --------------------- Helpers ---------------------

def is_dispatcher(uid: int) -> bool:
    return uid in ADMIN_IDS

def only_digits_phone(p: str) -> str:
    return ''.join(ch for ch in (p or '') if ch in '+0123456789')

async def ensure_user(m: Message) -> User:
    u = USERS.get(m.from_user.id)
    if not u:
        u = User(user_id=m.from_user.id,
                 username=m.from_user.username,
                 full_name=m.from_user.full_name or m.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        USERS[m.from_user.id] = u
    else:
        u.username = m.from_user.username
        u.full_name = m.from_user.full_name or u.full_name
    return u

async def send_support_contacts(chat_id: int):
    text = "üìû –ù–∞—à –Ω–æ–º–µ—Ä: {}\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.".format(SUPPORT_PHONE)
    await bot.send_message(chat_id, text)

async def notify_dispatchers(text: str, kb: Optional[InlineKeyboardMarkup] = None):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú –∏–∑ ADMIN_IDS (–Ω–µ –≤–∞–∂–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏ –ª–∏ –æ–Ω–∏ —Ä–æ–ª—å)
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text, reply_markup=kb)
        except Exception:
            pass
    # –ò —Ç–µ–º, –∫—Ç–æ —è–≤–Ω–æ –≤ —Ä–æ–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ ADMIN_IDS –ø—É—Å—Ç)
    for u in USERS.values():
        if u.role == "dispatcher" and is_dispatcher(u.user_id):
            try:
                await bot.send_message(u.user_id, text, reply_markup=kb)
            except Exception:
                pass

def add_call_log(user: User, phone: str, source: str) -> CallLog:
    log = CallLog(
        id=next_call_log_id(),
        ts=datetime.utcnow(),
        from_user_id=user.user_id,
        from_name=user.full_name or str(user.user_id),
        phone=phone,
        source=source,
        status="new"
    )
    CALL_LOGS[log.id] = log
    return log

# --------------------- States ---------------------

class CreateOrder(StatesGroup):
    waiting_desc = State()
    waiting_day = State()
    waiting_time = State()
    waiting_address = State()
    collecting_docs = State()

class ExecBid(StatesGroup):
    waiting_price = State()

class SharePhone(StatesGroup):
    waiting_phone_text = State()

class Availability(StatesGroup):
    waiting_text = State()

# --------------------- Start & Role ---------------------

@dp.message(CommandStart())
async def start(m: Message):
    u = await ensure_user(m)
    if u.role == "dispatcher" and not is_dispatcher(u.user_id):
        u.role = None
    await bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Å—Ç—Ä–æ–π—Ä–∞–±–æ—Ç. –í—Å—ë –ø—Ä–æ—Å—Ç–æ, –ø–æ —à–∞–≥–∞–º.")
    await show_menu(m.from_user.id)

@dp.message(Command("menu"))
async def menu_cmd(m: Message):
    await show_menu(m.from_user.id)

@dp.message(Command("contacts"))
async def contacts_cmd(m: Message):
    await send_support_contacts(m.chat.id)

async def show_menu(uid: int):
    u = USERS.get(uid)
    if not u or not u.role:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–Ø –∑–∞–∫–∞–∑—á–∏–∫", callback_data="role:c")],
            [InlineKeyboardButton(text="–Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data="role:e")],
            [InlineKeyboardButton(text="–î–∏—Å–ø–µ—Ç—á–µ—Ä", callback_data="role:d")]
        ])
        await bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb)
        await send_support_contacts(uid)
        return
    if u.role == "customer":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="c:new")],
            [InlineKeyboardButton(text="üì¨ –ú–æ–∏ –∑–∞–∫–∞–∑—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="c:offers")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="call:0"),
             InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        await bot.send_message(uid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∑–∞–∫–∞–∑—á–∏–∫):", reply_markup=kb)
    elif u.role == "executor":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö¶ –ó–∞–∫–∞–∑—ã —Ä—è–¥–æ–º", callback_data="e:feed")],
            [InlineKeyboardButton(text="üóì –ú–æ—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data="e:avail")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="call:0"),
             InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        await bot.send_message(uid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å):", reply_markup=kb)
    else:
        if not is_dispatcher(uid):
            await bot.send_message(uid, "–†–æ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: /contacts")
            return
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="d:open")],
            [InlineKeyboardButton(text="üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="d:chats")],
            [InlineKeyboardButton(text="üìû –õ–æ–≥–∏ –∑–≤–æ–Ω–∫–æ–≤", callback_data="d:logs")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="d:help")],
        ])
        await bot.send_message(uid, "–ü–∞–Ω–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:", reply_markup=kb)

# --------------------- Role switch ---------------------

@dp.callback_query(F.data == "home")
async def home_cb(c: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_menu(c.from_user.id)
    await c.answer()

@dp.callback_query(F.data.startswith("role:"))
async def pick_role(c: CallbackQuery):
    code = c.data.split(":", 1)[1]
    u = USERS.get(c.from_user.id)
    if not u:
        u = User(
            user_id=c.from_user.id,
            username=c.from_user.username,
            full_name=c.from_user.full_name or c.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        USERS[c.from_user.id] = u
    else:
        u.username = c.from_user.username
        u.full_name = c.from_user.full_name or u.full_name

    if code == "c":
        u.role = "customer"
    elif code == "e":
        u.role = "executor"
    else:
        if not is_dispatcher(c.from_user.id):
            await c.answer("–¢–æ–ª—å–∫–æ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
            return
        u.role = "dispatcher"

    await c.answer("–†–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    await show_menu(c.from_user.id)

# --------------------- Customer: Create Order ---------------------

@dp.callback_query(F.data == "c:new")
async def c_new(c: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(CreateOrder.waiting_desc)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="home")]])
    await c.message.answer("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.\n–ü—Ä–∏–º–µ—Ä: ¬´–°–Ω—è—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±–æ–∏ –∏ –ø–æ–∫–ª–µ–∏—Ç—å –Ω–æ–≤—ã–µ, –∫–æ–º–Ω–∞—Ç–∞ 18–º¬≤¬ª.", reply_markup=kb)
    await c.answer()

@dp.message(CreateOrder.waiting_desc)
async def c_desc(m: Message, state: FSMContext):
    await state.update_data(description=m.text.strip())
    await state.set_state(CreateOrder.waiting_day)
    today = datetime.now()
    days = [(today + timedelta(days=i)) for i in range(0, 7)]
    rows = []
    rows.append([InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"cday:{today.strftime('%Y-%m-%d')}")])
    rows.append([InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"cday:{(today+timedelta(days=1)).strftime('%Y-%m-%d')}")])
    for d in days:
        label = d.strftime("%a %d.%m")
        rows.append([InlineKeyboardButton(text=label, callback_data=f"cday:{d.strftime('%Y-%m-%d')}")])
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="home")])
    await m.answer("üìÖ –ö–æ–≥–¥–∞ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—ã? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

@dp.callback_query(F.data.startswith("cday:"))
async def c_day(c: CallbackQuery, state: FSMContext):
    day = c.data.split(":", 1)[1]
    await state.update_data(day=day)
    await state.set_state(CreateOrder.waiting_time)
    rows = [
        [InlineKeyboardButton(text="–£—Ç—Ä–æ (09:00)", callback_data="ctime:09:00")],
        [InlineKeyboardButton(text="–î–µ–Ω—å (13:00)", callback_data="ctime:13:00")],
        [InlineKeyboardButton(text="–í–µ—á–µ—Ä (18:00)", callback_data="ctime:18:00")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="ctime:custom")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="home")]
    ]
    await c.message.answer("‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ —É–¥–æ–±–Ω–æ?", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
    await c.answer()

@dp.callback_query(F.data.startswith("ctime:"))
async def c_time(c: CallbackQuery, state: FSMContext):
    val = c.data.split(":", 1)[1]   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º "HH:MM"
    if val == "custom":
        await state.set_state(CreateOrder.waiting_time)
        await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 10:30.")
        await c.answer()
        return
    await state.update_data(time=val)
    await ask_address(c.message, state)
    await c.answer()

@dp.message(CreateOrder.waiting_time)
async def c_time_text(m: Message, state: FSMContext):
    txt = (m.text or "").strip()
    try:
        datetime.strptime(txt, "%H:%M")
    except Exception:
        await m.answer("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: 10:30")
        return
    await state.update_data(time=txt)
    await ask_address(m, state)

async def ask_address(target_message_holder, state: FSMContext):
    await state.set_state(CreateOrder.waiting_address)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="home")]])
    if isinstance(target_message_holder, Message):
        await target_message_holder.answer("üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–ª–æ–≤–∞–º–∏ (—É–ª–∏—Ü–∞, –¥–æ–º). –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≥–µ–æ–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).", reply_markup=kb)
    else:
        await bot.send_message(target_message_holder.chat.id, "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–ª–æ–≤–∞–º–∏ (—É–ª–∏—Ü–∞, –¥–æ–º).", reply_markup=kb)

@dp.message(CreateOrder.waiting_address, F.content_type.in_({"text", "location"}))
async def c_address(m: Message, state: FSMContext):
    data = await state.get_data()
    day = data.get("day")
    time = data.get("time")
    desc = data.get("description")
    when = datetime.strptime(f"{day} {time}", "%Y-%m-%d %H:%M")

    address_text = None
    latlon = None
    if m.location:
        latlon = (m.location.latitude, m.location.longitude)
    else:
        address_text = m.text.strip()

    oid = next_order_id()
    ORDERS[oid] = Order(
        id=oid, customer_id=m.from_user.id, description=desc, when_dt=when,
        address_text=address_text, latlon=latlon, attachments_count=0, status="open"
    )

    await state.set_state(CreateOrder.collecting_docs)
    rows = [[InlineKeyboardButton(text="üìé –ì–æ—Ç–æ–≤–æ (–±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)", callback_data=f"cfinish:{oid}")]]
    addr_show = address_text or "–≥–µ–æ–º–µ—Ç–∫–∞"
    await m.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ #{oid} —Å–æ–∑–¥–∞–Ω.\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: *{when.strftime('%d.%m %H:%M')}*\n–ê–¥—Ä–µ—Å: *{addr_show}*\n\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª—ã. –ü–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows)
    )

@dp.message(CreateOrder.collecting_docs, F.content_type.in_({"photo", "document"}))
async def c_docs(m: Message, state: FSMContext):
    for o in ORDERS.values():
        if o.customer_id == m.from_user.id and o.status == "open":
            o.attachments_count += 1
            break
    await m.answer("üìé –ü—Ä–∏–Ω—è–ª. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô.")

@dp.callback_query(F.data.startswith("cfinish:"))
async def c_finish(c: CallbackQuery):
    oid = int(c.data.split(":", 1)[1])
    o = ORDERS.get(oid)
    if not o:
        await c.answer("–ù–µ –Ω–∞—à—ë–ª –∑–∞–∫–∞–∑", show_alert=True)
        return
    await c.answer()
    await c.message.answer("–ó–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Ä—è–¥–æ–º —É–≤–∏–¥—è—Ç –∏ –ø—Ä–∏—à–ª—é—Ç —Ü–µ–Ω—ã.")
    await show_menu(c.from_user.id)

# --------------------- Executor: Feed & Bids ---------------------

@dp.callback_query(F.data == "e:feed")
async def e_feed(c: CallbackQuery):
    opens = [o for o in ORDERS.values() if o.status == "open"]
    if not opens:
        await c.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.")
        await c.answer()
        return
    for o in sorted(opens, key=lambda x: (x.when_dt or datetime.max)):
        addr = o.address_text or "–≥–µ–æ–º–µ—Ç–∫–∞"
        text = (
            f"üìå –ó–∞–∫–∞–∑ #{o.id}\n"
            f"–î–∞—Ç–∞: {o.when_dt.strftime('%d.%m %H:%M') if o.when_dt else '‚Äî'}\n"
            f"–ê–¥—Ä–µ—Å: {addr}\n\n"
            f"{o.description}\n\nüìé –í–ª–æ–∂–µ–Ω–∏–π: {o.attachments_count}"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"ebid:{o.id}")]
        ])
        await c.message.answer(text, reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.startswith("ebid:"))
async def e_bid(c: CallbackQuery, state: FSMContext):
    oid = int(c.data.split(":", 1)[1])
    o = ORDERS.get(oid)
    if not o or o.status != "open":
        await c.answer("–ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    await state.set_state(ExecBid.waiting_price)
    await state.update_data(order_id=oid)
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ). –ö–æ–º–∏—Å—Å–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    await c.answer()

@dp.message(ExecBid.waiting_price)
async def e_price(m: Message, state: FSMContext):
    data = await state.get_data()
    oid = data.get("order_id")
    o = ORDERS.get(oid)
    if not o or o.status != "open":
        await state.clear()
        await m.answer("–ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    try:
        price = float((m.text or "").replace(",", "."))
        if price <= 0:
            raise ValueError
    except Exception:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 350")
        return
    o.bids[m.from_user.id] = price
    await state.clear()
    commission = round(price * COMMISSION_PCT, 2)
    total = round(price + commission, 2)
    await m.answer(f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ö–ª–∏–µ–Ω—Ç —É–≤–∏–¥–∏—Ç: —Ü–µ–Ω–∞ {price:.2f} + –∫–æ–º–∏—Å—Å–∏—è {commission:.2f} = *{total:.2f}*.")
    try:
        await bot.send_message(
            o.customer_id,
            f"üì® –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #{o.id}: *{total:.2f}* (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é). –ó–∞–π–¥–∏—Ç–µ –≤ –ú–æ–∏ –∑–∞–∫–∞–∑—ã, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å."
        )
    except Exception:
        pass

# --------------------- Customer: Offers & Choose ---------------------

@dp.callback_query(F.data == "c:offers")
async def c_offers(c: CallbackQuery):
    my = [o for o in ORDERS.values() if o.customer_id == c.from_user.id and o.status == "open"]
    if not my:
        await c.message.answer("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        await c.answer()
        return
    for o in my:
        if not o.bids:
            await c.message.answer(f"–ó–∞–∫–∞–∑ #{o.id}: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            continue
        lines = [f"–ó–∞–∫–∞–∑ #{o.id} ‚Äî {o.when_dt.strftime('%d.%m %H:%M') if o.when_dt else '‚Äî'}"]
        rows = []
        for exec_id, price in o.bids.items():
            commission = round(price * COMMISSION_PCT, 2)
            total = round(price + commission, 2)
            lines.append(f"‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {exec_id}: *{total:.2f}* (–≤ —Ç.—á. –∫–æ–º–∏—Å—Å–∏—è {commission:.2f})")
            rows.append([InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å {exec_id}", callback_data=f"cchoose:{o.id}:{exec_id}")])
        await c.message.answer("\n".join(lines), reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
    await c.answer()

@dp.callback_query(F.data.startswith("cchoose:"))
async def c_choose(c: CallbackQuery):
    _, oid_s, eid_s = c.data.split(":")
    oid, eid = int(oid_s), int(eid_s)
    o = ORDERS.get(oid)
    if not o or o.customer_id != c.from_user.id or o.status != "open":
        await c.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
    price = o.bids.get(eid)
    if price is None:
        await c.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    commission = round(price * COMMISSION_PCT, 2)
    total = round(price + commission, 2)
    o.status = "matched"
    o.chosen_executor_id = eid
    ACTIVE_CHATS[o.customer_id] = (eid, o.id)
    ACTIVE_CHATS[eid] = (o.customer_id, o.id)
    await c.message.answer(
        f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω. –û–±—â–∞—è —Å—É–º–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: *{total:.2f}*.\n"
        f"–û–ø–ª–∞—Ç—É –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ –≤–Ω–µ –±–æ—Ç–∞. –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.\n"
        f"–ö–æ–º–∞–Ω–¥—ã: /reveal, /end, /contacts"
    )
    try:
        await bot.send_message(eid, f"‚úÖ –í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –ø–æ –∑–∞–∫–∞–∑—É #{oid}. –ü–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –±–æ—Ç –ø–µ—Ä–µ–¥–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç—É.")
    except Exception:
        pass
    await c.answer()

# --------------------- Reveal / End ---------------------

@dp.message(Command("reveal"))
async def cmd_reveal(m: Message):
    link = ACTIVE_CHATS.get(m.from_user.id)
    if not link:
        await m.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
        return
    peer_id, oid = link
    mt = MATCHES.get(oid)
    if not mt:
        o = ORDERS.get(oid)
        if o:
            MATCHES[oid] = Match(order_id=oid, customer_id=o.customer_id, executor_id=o.chosen_executor_id or peer_id)
            mt = MATCHES[oid]
    mt.reveal_requested[m.from_user.id] = True
    both = len(mt.reveal_requested) == 2 and all(mt.reveal_requested.get(uid) for uid in [mt.customer_id, mt.executor_id])
    if both or mt.reveal_approved_by_dispatcher:
        cu, eu = USERS[mt.customer_id], USERS[mt.executor_id]
        await bot.send_message(mt.customer_id, f"üîì –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã: {mention(eu.user_id, eu.username, eu.full_name)}")
        await bot.send_message(mt.executor_id, f"üîì –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã: {mention(cu.user_id, cu.username, cu.full_name)}")
    else:
        await m.answer("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –†–∞—Å–∫—Ä–æ–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.")
        await notify_dispatchers(f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –∑–∞–∫–∞–∑—É #{oid}. –û–¥–æ–±—Ä–∏—Ç—å: /approve_reveal {oid}")

@dp.message(Command("approve_reveal"))
async def cmd_approve_reveal(m: Message):
    u = await ensure_user(m)
    if not (u.role == "dispatcher" and is_dispatcher(u.user_id)):
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤.")
        return
    parts = (m.text or "").split()
    if len(parts) < 2:
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve_reveal <order_id>")
        return
    try:
        order_id = int(parts[1])
    except Exception:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π order_id")
        return
    mt = MATCHES.get(order_id)
    if not mt:
        o = ORDERS.get(order_id)
        if not o or not o.chosen_executor_id:
            await m.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        MATCHES[order_id] = Match(order_id=order_id, customer_id=o.customer_id, executor_id=o.chosen_executor_id)
        mt = MATCHES[order_id]
    mt.reveal_approved_by_dispatcher = True
    cu, eu = USERS[mt.customer_id], USERS[mt.executor_id]
    await bot.send_message(mt.customer_id, f"üîì –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ–¥–æ–±—Ä–∏–ª —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ: {mention(eu.user_id, eu.username, eu.full_name)}")
    await bot.send_message(mt.executor_id, f"üîì –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ–¥–æ–±—Ä–∏–ª —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ: {mention(cu.user_id, cu.username, cu.full_name)}")
    await m.answer("–û–¥–æ–±—Ä–µ–Ω–æ")

@dp.message(Command("end"))
async def cmd_end(m: Message):
    link = ACTIVE_CHATS.pop(m.from_user.id, None)
    if not link:
        await m.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
        return
    peer_id, oid = link
    ACTIVE_CHATS.pop(peer_id, None)
    o = ORDERS.get(oid)
    if o:
        o.status = "closed"
    await m.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç.")
    try:
        await bot.send_message(peer_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç.")
    except Exception:
        pass

# --------------------- PHONE HANDLERS ---------------------

@dp.callback_query(F.data.startswith("call:"))
async def call_cb(c: CallbackQuery):
    await send_support_contacts(c.from_user.id)
    rows = [[InlineKeyboardButton(text="üì≤ –û—Å—Ç–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä (–Ω–∞–ø–∏—à—É —Å–∞–º)", callback_data="call:leave")]]
    await c.message.answer(
        "–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤–∞—à–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows)
    )
    await c.answer()

@dp.callback_query(F.data == "call:leave")
async def call_leave(c: CallbackQuery, state: FSMContext):
    await state.set_state(SharePhone.waiting_phone_text)
    await c.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.")
    await c.answer()

@dp.message(SharePhone.waiting_phone_text)
async def receive_phone_text(m: Message, state: FSMContext):
    digits = only_digits_phone(m.text or "")
    if len(digits) < 7:
        await m.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: +375291234567")
        return
    now = datetime.utcnow()
    last = LAST_PHONE_SHARE.get(m.from_user.id)
    if last and (now - last).total_seconds() < PHONE_SHARE_RATE_LIMIT:
        await m.answer("–ú—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è. –°–ø–∞—Å–∏–±–æ!")
    else:
        LAST_PHONE_SHARE[m.from_user.id] = now
        u = USERS.get(m.from_user.id) or await ensure_user(m)
        log = add_call_log(u, digits, source="button")
        await notify_dispatchers(
            f"üìû –ó–∞—è–≤–∫–∞ #{log.id} –Ω–∞ –∑–≤–æ–Ω–æ–∫: {log.phone}\n–û—Ç: {mention(u.user_id, u.username, u.full_name)}\n–ö–æ–≥–¥–∞: {log.ts.strftime('%d.%m %H:%M UTC')}",
            kb=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìí –õ–æ–≥–∏ –∑–≤–æ–Ω–∫–æ–≤", callback_data="d:logs")]])
        )
        await m.answer("–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–¥–∞–ª –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.")
    await state.clear()

# –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–æ–º–µ—Ä–∞, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –≤–Ω–µ —à–∞–≥–æ–≤/—á–∞—Ç–æ–≤
@dp.message(F.text)
async def fallback_catch_phone(m: Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    if ACTIVE_CHATS.get(m.from_user.id):
        return
    digits = only_digits_phone(m.text or "")
    if len(digits) >= 7:
        now = datetime.utcnow()
        last = LAST_PHONE_SHARE.get(m.from_user.id)
        if last and (now - last).total_seconds() < PHONE_SHARE_RATE_LIMIT:
            await m.answer("–ú—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è. –°–ø–∞—Å–∏–±–æ!")
            return
        LAST_PHONE_SHARE[m.from_user.id] = now
        u = USERS.get(m.from_user.id) or await ensure_user(m)
        log = add_call_log(u, digits, source="text")
        await notify_dispatchers(
            f"üìû –ó–∞—è–≤–∫–∞ #{log.id} –Ω–∞ –∑–≤–æ–Ω–æ–∫: {log.phone}\n–û—Ç: {mention(u.user_id, u.username, u.full_name)}\n–ö–æ–≥–¥–∞: {log.ts.strftime('%d.%m %H:%M UTC')}",
            kb=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìí –õ–æ–≥–∏ –∑–≤–æ–Ω–∫–æ–≤", callback_data="d:logs")]])
        )
        await m.answer("–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–¥–∞–ª –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.")

# --------------------- Relay (–∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç) ---------------------

@dp.message(F.content_type.in_({"photo", "document", "audio", "video", "voice", "video_note", "location", "sticker"}))
async def relay_non_text(m: Message):
    link = ACTIVE_CHATS.get(m.from_user.id)
    if not link:
        return
    peer_id, _ = link
    try:
        await bot.copy_message(chat_id=peer_id, from_chat_id=m.chat.id, message_id=m.message_id)
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

@dp.message(F.text)
async def relay_text(m: Message):
    link = ACTIVE_CHATS.get(m.from_user.id)
    if not link:
        return
    peer_id, _ = link
    try:
        await bot.copy_message(chat_id=peer_id, from_chat_id=m.chat.id, message_id=m.message_id)
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

# --------------------- Help ---------------------

@dp.callback_query(F.data == "help")
async def help_cb(c: CallbackQuery):
    await c.message.answer("–ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–ª–∏—Å—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚Äò–°–≤—è–∑–∞—Ç—å—Å—è‚Äô. –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –∏ –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂–µ–º.")
    await call_cb(c)

# --------------------- Dispatcher Tools ---------------------

@dp.callback_query(F.data == "d:open")
async def d_open(c: CallbackQuery):
    if not is_dispatcher(c.from_user.id):
        await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    opens = [o for o in ORDERS.values() if o.status == "open"]
    if not opens:
        await c.message.answer("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
    else:
        text = "\n".join([
            f"#{o.id} ‚Äî {o.when_dt.strftime('%d.%m %H:%M') if o.when_dt else '‚Äî'} ‚Äî {o.description[:80]}"
            for o in sorted(opens, key=lambda x: (x.when_dt or datetime.max))
        ])
        await c.message.answer(text)
    await c.answer()

@dp.callback_query(F.data == "d:chats")
async def d_chats(c: CallbackQuery):
    if not is_dispatcher(c.from_user.id):
        await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    act = []
    seen_pairs = set()
    for uid, (peer, oid) in list(ACTIVE_CHATS.items()):
        pair = tuple(sorted((uid, peer)))
        if pair in seen_pairs:
            continue
        seen_pairs.add(pair)
        o = ORDERS.get(oid)
        if not o:
            continue
        cu = USERS.get(o.customer_id)
        eu = USERS.get(o.chosen_executor_id or peer)
        act.append(f"#{oid}: {mention(cu.user_id, cu.username, cu.full_name)} ‚Üî {mention(eu.user_id, eu.username, eu.full_name)}")
    await c.message.answer("\n".join(act) or "–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç")
    await c.answer()

@dp.callback_query(F.data == "d:logs")
async def d_logs(c: CallbackQuery):
    if not is_dispatcher(c.from_user.id):
        await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ "new", –º–∞–∫—Å–∏–º—É–º 15 —à—Ç., –∫–∞–∂–¥—É—é ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    new_logs = [l for l in CALL_LOGS.values() if l.status == "new"]
    new_logs.sort(key=lambda x: x.ts, reverse=True)
    if not new_logs:
        done = [l for l in CALL_LOGS.values() if l.status == "done"]
        done.sort(key=lambda x: x.ts, reverse=True)
        if not done:
            await c.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–≤–æ–Ω–æ–∫.")
        else:
            await c.message.answer("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):")
            for l in done[:10]:
                text = f"#{l.id} ‚Ä¢ {l.phone} ‚Ä¢ {l.ts.strftime('%d.%m %H:%M UTC')} ‚Ä¢ –æ—Ç {l.from_name} ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                await c.message.answer(text)
    else:
        await c.message.answer("–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:")
        for l in new_logs[:15]:
            text = f"#{l.id} ‚Ä¢ {l.phone} ‚Ä¢ {l.ts.strftime('%d.%m %H:%M UTC')} ‚Ä¢ –æ—Ç {l.from_name}"
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", callback_data=f"d:logdone:{l.id}")]
            ])
            await c.message.answer(text, reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.startswith("d:logdone:"))
async def d_logdone(c: CallbackQuery):
    if not is_dispatcher(c.from_user.id):
        await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    try:
        lid = int(c.data.split(":", 2)[2])
    except Exception:
        await c.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return
    log = CALL_LOGS.get(lid)
    if not log:
        await c.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    log.status = "done"
    new_text = f"#{log.id} ‚Ä¢ {log.phone} ‚Ä¢ {log.ts.strftime('%d.%m %H:%M UTC')} ‚Ä¢ –æ—Ç {log.from_name} ‚Äî ‚úÖ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    try:
        await c.message.edit_text(new_text)
    except Exception:
        await c.message.answer(new_text)
    await c.answer("–û—Ç–º–µ—á–µ–Ω–æ")

@dp.callback_query(F.data == "d:help")
async def d_help(c: CallbackQuery):
    if not is_dispatcher(c.from_user.id):
        await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await c.message.answer("–ö–æ–º–∞–Ω–¥—ã: /approve_reveal <order_id>, /end ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫ ‚Äî —É–∫–∞–∂–∏—Ç–µ ADMIN_IDS.")
    await c.answer()

# --------------------- Entry ---------------------

async def main():
    print("Bot is running (Inline-first)‚Ä¶")
    # –°–±—Ä–æ—Å webhook, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –ø—Ä–æ—à–ª—ã–º —Ö–æ—Å—Ç–∏–Ω–≥–æ–º
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
